var documenterSearchIndex = {"docs":
[{"location":"#AutoVectors.jl-Documentation","page":"AutoVectors.jl Documentation","title":"AutoVectors.jl Documentation","text":"","category":"section"},{"location":"","page":"AutoVectors.jl Documentation","title":"AutoVectors.jl Documentation","text":"","category":"page"},{"location":"#Constructors","page":"AutoVectors.jl Documentation","title":"Constructors","text":"","category":"section"},{"location":"","page":"AutoVectors.jl Documentation","title":"AutoVectors.jl Documentation","text":"AutoVector(0.0)\nmakeAutoVectorOfVecs(veczero::Vector,mini::Integer,maxi::Integer)","category":"page"},{"location":"#AutoVectors.AutoVector-Tuple{Any}","page":"AutoVectors.jl Documentation","title":"AutoVectors.AutoVector","text":"AutoVector(def=0.0,mini::Integer=1,maxi::Integer=0,miniloc::Integer=0)\nAutoVector(f::Function,mini::Integer=1,maxi::Integer=0,miniloc::Integer=0)\nAutoVector(v::Vector,mini::Integer=1,maxi::Integer=0,miniloc::Integer=0)\n\nFrequently you just use\n\nv = AutoVector(), defaulting to Float64, size 0\n\nor     v = AutoVector(0), defaulting to Int64, size 0\n\nAn AutoVector expands when written to outside its range. Reading outside its range  does not expand the range, and gives def.\n\nArguments:\n\ndefâ€“default element, usually 0.0. Determines the type T of AutoVector{T}\n\nmini and maxi give the index range of the created AutoVector (logical indices, not index in data vector)\n\nminiloc is the location of mini-1 within the data vector, default 0 (data index)\n\nYou can initialize an AutoVector with the default, from a function, or by putting in a vector. Most functions and constructors deal with logical indices, Data indices refers to location within the data vector dat, which should not be something to worry about normally.\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.makeAutoVectorOfVecs-Tuple{Vector{T} where T, Integer, Integer}","page":"AutoVectors.jl Documentation","title":"AutoVectors.makeAutoVectorOfVecs","text":"makeAutoVectorOfVecs(veczero::Vector,mini::Integer,maxi::Integer)\n\nCreate an AutoVector that holds vectors as elements, index from mini to maxi by v where the zero default vector is veczero\n\n\n\n\n\n","category":"method"},{"location":"#Functions","page":"AutoVectors.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"AutoVectors.jl Documentation","title":"AutoVectors.jl Documentation","text":"mini(v::AutoVector)\nmaxi(v::AutoVector)\nlength(v::AutoVector)\narange(v::AutoVector)\navvec(v::AutoVector)\navdot(x::AutoVector,y::AutoVector)\nconvolve(x::AutoVector,y::AutoVector,cut=1.0e-14) \ndoprint(v::AutoVector)\nfast(v::AutoVector,i)\nclear!(v::AutoVector)\navnorm(v::AutoVector)\navlocation(v::AutoVector,i)\navlocmin(v::AutoVector)\navlocmax(v::AutoVector)\navtriple(x::AutoVector,y::AutoVector,z::AutoVector)\naxpy!(y::AutoVector,a::Float64,x::AutoVector) \naxpy!(y::AutoVector,a::Float64,x::AutoVector, cutoff::Float64) \navtripconv(u::AutoVector,g::AutoVector,v::AutoVector)\nmakeauto(v::Vector{Float64},offset::Integer)\napplyshift(x::AutoVector,offset::Integer)\nshrink!(x::AutoVector,cut)\nreverse_ind(x::AutoVector)\n","category":"page"},{"location":"#AutoVectors.mini-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.mini","text":"mini(v::AutoVector)\n\nMinimum logical index\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.maxi-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.maxi","text":"maxi(v::AutoVector)\n\nMaximum logical index\n\n\n\n\n\n","category":"method"},{"location":"#Base.length-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"Base.length","text":"length(v::AutoVector)\n\nLogical length\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.arange-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.arange","text":"avrange(v::AutoVector)\n\navrange(v) or arange(v) gives the logical range as mini:maxi\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avvec-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avvec","text":"avvec(v::AutoVector)\n\navvec(v) creates a standard vector with all values from mini to maxi\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avdot-Tuple{AutoVector, AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avdot","text":"avdot(x::AutoVector,y::AutoVector)\n\nDot product (no conjugating)\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.convolve","page":"AutoVectors.jl Documentation","title":"AutoVectors.convolve","text":"convolve(x::AutoVector,y::AutoVector,cut=1.0e-14)\t\t# use absolute cutoff\n\nConvolve with cutoff\n\n\n\n\n\n","category":"function"},{"location":"#AutoVectors.doprint-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.doprint","text":"doprint([file descriptor],v::AutoVector; spacing = 1)\n\nPrint to standard output or a file all the elements\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.fast-Tuple{AutoVector, Any}","page":"AutoVectors.jl Documentation","title":"AutoVectors.fast","text":"fast(v::AutoVector,i)\n\nfast(v,i) is like accessing v[i], but outside bounds throws standard range exception combined with @inbounds it will be very fast\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.clear!-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.clear!","text":"clear!(v::AutoVector)\n\nclear!(v) resets v to empty\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avnorm-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avnorm","text":"avnorm(v::AutoVector)\n\nnorm of AutoVector\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avlocation-Tuple{AutoVector, Any}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avlocation","text":"avlocation(v::AutoVector,i)\n\navlocation(v,i) gives the data location of logical index i\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avlocmin-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avlocmin","text":"avlocmin(v::AutoVector)\n\navlocmin(v) gives the data location of mini(v)\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avlocmax-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avlocmax","text":"avlocmax(v::AutoVector)\n\navlocmax(v) gives the data location of mini(v)\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avtriple-Tuple{AutoVector, AutoVector, AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avtriple","text":"avtriple(x::AutoVector,y::AutoVector,z::AutoVector)\n\nTriple dot product (no conjugating)\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.axpy!-Tuple{AutoVector, Float64, AutoVector}","page":"AutoVectors.jl Documentation","title":"LinearAlgebra.axpy!","text":"axpy!(y::AutoVector,a::Float64,x::AutoVector)\t# y += a * x\n\n\n\n\n\n","category":"method"},{"location":"#LinearAlgebra.axpy!-Tuple{AutoVector, Float64, AutoVector, Float64}","page":"AutoVectors.jl Documentation","title":"LinearAlgebra.axpy!","text":"axpy!(y::AutoVector,a::Float64,x::AutoVector, cutoff::Float64)\t# y += a * x with cutoff for writing\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.avtripconv-Tuple{AutoVector, AutoVector, AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.avtripconv","text":"avtripconv(u::AutoVector,g::AutoVector,v::AutoVector)\n\nSame as avdot(convolve(u,g),v)\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.makeauto-Tuple{Vector{Float64}, Integer}","page":"AutoVectors.jl Documentation","title":"AutoVectors.makeauto","text":"makeauto(v::Vector{Float64},offset::Integer)\n\nConvmake AutoVector out of vector by shifting to left by offset\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.applyshift-Tuple{AutoVector, Integer}","page":"AutoVectors.jl Documentation","title":"AutoVectors.applyshift","text":"applyshift(x::AutoVector,offset::Integer)\n\nShift to left by offset, no new data array\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.shrink!-Tuple{AutoVector, Any}","page":"AutoVectors.jl Documentation","title":"AutoVectors.shrink!","text":"shrink!(x::AutoVector,cut)\n\nnew mini and maxi to zero out tails less than cut\n\n\n\n\n\n","category":"method"},{"location":"#AutoVectors.reverse_ind-Tuple{AutoVector}","page":"AutoVectors.jl Documentation","title":"AutoVectors.reverse_ind","text":"reverse_ind(x::AutoVector)\n\nnew AutoVector goes from -maxi to -mini;  reflection really\n\n\n\n\n\n","category":"method"},{"location":"#Index","page":"AutoVectors.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"AutoVectors.jl Documentation","title":"AutoVectors.jl Documentation","text":"","category":"page"}]
}
